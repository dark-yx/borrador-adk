steps:
# 1. Build the backend Docker image
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'build'
    - '-t'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:$COMMIT_SHA'
    - '-t'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:latest'
    - '.'
  dir: 'legislink-pro'

# 2. Build the frontend Docker image
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'build'
    - '-t'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:$COMMIT_SHA'
    - '-t'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:latest'
    - '.'
  dir: 'legislink-pro/frontend'

# 3. Push backend image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:$COMMIT_SHA'

- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:latest'

# 4. Push frontend image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:$COMMIT_SHA'

- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'push'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:latest'

# 5. Deploy backend to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'legislink-backend'
    - '--image'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:$COMMIT_SHA'
    - '--region'
    - '$_GCP_REGION'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--port'
    - '5000'
    - '--memory'
    - '2Gi'
    - '--cpu'
    - '2'
    - '--max-instances'
    - '10'
    - '--set-env-vars'
    - 'FLASK_ENV=production,GCP_PROJECT_ID=$PROJECT_ID,GCP_REGION=$_GCP_REGION'
    - '--service-account'
    - 'legislink-service@$PROJECT_ID.iam.gserviceaccount.com'

# 6. Deploy frontend to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'legislink-frontend'
    - '--image'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:$COMMIT_SHA'
    - '--region'
    - '$_GCP_REGION'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--port'
    - '80'
    - '--memory'
    - '512Mi'
    - '--cpu'
    - '1'
    - '--max-instances'
    - '5'

# 7. Update secrets in Secret Manager (if needed)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'secrets'
    - 'versions'
    - 'add'
    - 'legislink-gemini-key'
    - '--data-file'
    - '/workspace/legislink-pro/.env'
  allowFailure: true

# 8. Run tests
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'run'
    - '--rm'
    - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:$COMMIT_SHA'
    - 'python'
    - '-m'
    - 'pytest'
    - 'tests/'
    - '-v'
    - '--cov=legislink-pro'
    - '--cov-report=html'
  allowFailure: true

# 9. Update Cloud Run services with secrets
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'services'
    - 'update'
    - 'legislink-backend'
    - '--region'
    - '$_GCP_REGION'
    - '--update-secrets'
    - 'GEMINI_API_KEY=legislink-gemini-key:latest,DB_PASSWORD=legislink-db-password:latest'
  allowFailure: true

images:
- '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:$COMMIT_SHA'
- '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/backend:latest'
- '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:$COMMIT_SHA'
- '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/legislink-repo/frontend:latest'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

substitutions:
  _GCP_REGION: 'us-central1' 